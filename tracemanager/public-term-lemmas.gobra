package tracemanager

import tm "gitlab.inf.ethz.ch/arquintl/prototrace/term"
import tr "gitlab.inf.ethz.ch/arquintl/prototrace/trace"


type PublicTermSearcher struct {
    ctx tr.TraceContext
    term tm.Term
}
PublicTermSearcher implements TraceSearcher

ghost
pure func (ps PublicTermSearcher) Ctx() tr.TraceContext {
    return ps.ctx
}

ghost
decreases
pure func (ps PublicTermSearcher) Matches(entry tr.TraceEntry) bool {
    return entry.isRoot() && ps.term in entry.getPublicTerms()
}

ghost
decreases
pure func (ps PublicTermSearcher) Occurs(entry tr.TraceEntry) bool {
    return ps.term in entry.getPublicTerms()
}

ghost
// decreases
pure func (ps PublicTermSearcher) PureEntryInv(entry tr.TraceEntry) bool {
    return entry.isRoot() && tr.publicInv(ps.ctx, entry.getPublicTerms(), entry)
}

ghost
decreases
requires ps.Occurs(entry)
ensures  (!entry.isRoot() && ps.Occurs(tr.getPrev(entry))) || ps.Matches(entry)
func (ps PublicTermSearcher) OccursImpliesAnEventualMatch(entry tr.TraceEntry) {
    // no body needed
}

ghost
decreases
requires noPerm < p && p <= writePerm
requires ps.Matches(entry)
requires acc(tr.validTrace(ps.Ctx(), entry), p)
ensures  ps.PureEntryInv(entry)
ensures  acc(tr.validTrace(ps.Ctx(), entry), p)
func (ps PublicTermSearcher) ExtractPureEntryInv(entry tr.TraceEntry, p perm) {
    assert unfolding acc(tr.validTrace(ps.Ctx(), entry), p) in true
}
// end of PublicTermSearcher's implementation


ghost
decreases
requires m.Mem(ctx, owner)
requires snap.isSuffix(m.Trace(ctx, owner))
requires term in snap.getPublicTerms()
ensures  m.Mem(ctx, owner)
ensures  prev.isSuffix(snap) && prev.isRoot()
ensures  prev.isSuffix(m.Trace(ctx, owner))
ensures  tr.publicInv(ctx, snap.getPublicTerms(), prev)
ensures  old(m.Trace(ctx, owner)) == m.Trace(ctx, owner)
ensures  m.ImmutableState(ctx, owner) == old(m.ImmutableState(ctx, owner))
func (m *TraceManager) PublicTermImpliesPublicInvWithSnap(ctx tr.TraceContext, owner Client, snap tr.TraceEntry, term tm.Term) (prev tr.TraceEntry) {
    searcher := PublicTermSearcher{ ctx, term }
    prev = m.findEntryWithPureInvWithSnap(searcher, owner, snap)
    prev.getPublicTermsMonotonic(snap)
    prev.isSuffixTransitive(snap, m.Trace(ctx, owner))
}

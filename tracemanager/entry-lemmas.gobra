package tracemanager

import tr "github.com/ModularVerification/ReusableVerificationLibrary/trace"


type EntrySearcher struct {
    ctx tr.TraceContext
    entry tr.TraceEntry
}
EntrySearcher implements TraceSearcher

ghost
pure func (es EntrySearcher) Ctx() tr.TraceContext {
    return es.ctx
}

ghost
decreases
requires entry.isSuffix(snapshot)
requires es.Occurs(snapshot)
pure func (es EntrySearcher) Matches(snapshot, entry tr.TraceEntry) bool {
    return entry == es.entry
}

ghost
decreases
pure func (es EntrySearcher) Occurs(entry tr.TraceEntry) bool {
    return es.entry.isSuffix(entry)
}

ghost
// decreases
pure func (es EntrySearcher) PureEntryInv(entry tr.TraceEntry) bool {
    return es.entry.isEvent() ==> es.ctx.pureEventInv(tr.getPrincipal(es.entry), tr.getEvent(es.entry), tr.getPrev(entry))
}

ghost
decreases
requires entry.isSuffix(snapshot)
requires es.Occurs(snapshot)
requires es.Occurs(entry)
ensures  (!entry.isRoot() && es.Occurs(tr.getPrev(entry))) || es.Matches(snapshot, entry)
func (es EntrySearcher) OccursImpliesAnEventualMatch(snapshot, entry tr.TraceEntry) {
    // no body needed
}

ghost
decreases
requires snapshot1 == tr.getPrev(snapshot2)
requires entry.isSuffix(snapshot1)
requires entry.isSuffix(snapshot2)
requires es.Occurs(snapshot1)
requires es.Occurs(snapshot2)
requires es.Matches(snapshot1, entry)
ensures  es.Occurs(snapshot2)
ensures  entry.isSuffix(snapshot2)
ensures  es.Matches(snapshot2, entry)
func (es EntrySearcher) MatchesTransitive(snapshot1, snapshot2, entry tr.TraceEntry) {
    // no body needed
}

ghost
decreases
requires noPerm < p && p <= writePerm
requires entry.isSuffix(snapshot)
requires es.Occurs(snapshot)
requires es.Matches(snapshot, entry)
requires acc(tr.validTrace(es.Ctx(), entry), p)
ensures  es.PureEntryInv(entry)
ensures  acc(tr.validTrace(es.Ctx(), entry), p)
func (es EntrySearcher) ExtractPureEntryInv(snapshot, entry tr.TraceEntry, p perm) {
    unfold acc(tr.validTrace(es.Ctx(), entry), p)
    if es.entry.isEvent() {
        es.Ctx().getPureEventInv(tr.getPrincipal(es.entry), tr.getEvent(es.entry), tr.getPrev(entry), p)
    }
    fold acc(tr.validTrace(es.Ctx(), entry), p)
}
// end of EntrySearcher's implementation

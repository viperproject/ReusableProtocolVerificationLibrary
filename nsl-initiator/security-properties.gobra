package nslInitiator

import ev "gitlab.inf.ethz.ch/arquintl/prototrace/event"
import ll "gitlab.inf.ethz.ch/arquintl/prototrace/labeled-library"
import "gitlab.inf.ethz.ch/arquintl/prototrace/labeling"
import . "gitlab.inf.ethz.ch/arquintl/prototrace/nsl-shared"
import p "gitlab.inf.ethz.ch/arquintl/prototrace/principal"
import tm "gitlab.inf.ethz.ch/arquintl/prototrace/term"
import tr "gitlab.inf.ethz.ch/arquintl/prototrace/trace"


ghost
requires a.Mem(naT, nbT) && a.Version(naT, nbT) == 2
ensures  a.Mem(naT, nbT) && a.Version(naT, nbT) == 3
func (a *A) proveSecurityProperties(naT, nbT tm.Term) {
	// we show that the authentication properties' precondition is satisfied:
	unfold a.Mem(naT, nbT)
	initiatorInjectiveAgreement(a.llib, a.idA, a.idB, naT, nbT)
	
	// we show now that the same naT & nbT are also secret:
	a.llib.SecrecyLemma(naT, set[p.Id]{ p.principalId(a.idA), p.principalId(a.idB) })
	a.llib.SecrecyLemma(nbT, set[p.Id]{ p.principalId(a.idA), p.principalId(a.idB) })

	a.version = 3
	fold a.Mem(naT, nbT)
}

ghost
decreases
requires l.Mem()
requires l.Ctx() == GetNslContext()
requires (l.Snapshot()).eventOccurs(idA, ev.NewEvent(FinishI, FinishIParams{ idA, idB, naT, nbT }))
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  l.Snapshot() == old(l.Snapshot())
ensures  l.NonInjectiveAgreement(idA, idB, ev.NewEvent(FinishI, FinishIParams{ idA, idB, naT, nbT }), ev.NewEvent(Respond, RespondParams{ idA, idB, naT, nbT }), set[p.Id]{ p.principalId(idA), p.principalId(idB) })
// the following postcondition provides further insights about the returned witness:
ensures  optCorruptedId != none[p.Id] ==>
	labeling.containsCorruptId((l.Snapshot()).getCorruptIds(), set[p.Id]{ p.principalId(idA), p.principalId(idB) }) &&
	(get(optCorruptedId).getPrincipal() == idA || get(optCorruptedId).getPrincipal() == idB)
func initiatorNonInjectiveAgreement(l *ll.LabeledLibrary, idA, idB p.Principal, naT, nbT tm.Term) (optCorruptedId option[p.Id]) {
	prev := l.EventOccursImpliesEventInv(idA, ev.NewEvent(FinishI, FinishIParams{ idA, idB, naT, nbT }))
	prevPrev := tr.getPrev(prev)
	prevPrev.isSuffixTransitive(prev, l.Snapshot())
	prevPrev.getCorruptIdsMonotonic(l.Snapshot())
	if p.principalId(idA) in prevPrev.getCorruptIds() {
		optCorruptedId = some(p.principalId(idA))
	} else if p.principalId(idB) in prevPrev.getCorruptIds() {
		optCorruptedId = some(p.principalId(idB))
	} else {
		optCorruptedId = none[p.Id]
		// Note that we know that neither idA nor idB have been corrupted at timepoint `prevPrev`.
		// However, they might have been corrupted in the meantime and thus we can not make a statement
		// on their current corruption state.
		prevPrev.eventOccursMonotonic(l.Snapshot(), idB, ev.NewEvent(Respond, RespondParams{ idA, idB, naT, nbT }))
	}
}

ghost
decreases
requires l.Mem()
requires l.Ctx() == GetNslContext()
requires (l.Snapshot()).eventOccurs(idA, ev.NewEvent(FinishI, FinishIParams{ idA, idB, naT, nbT }))
ensures  l.Mem()
ensures  l.ImmutableState() == old(l.ImmutableState())
ensures  l.Snapshot() == old(l.Snapshot())
ensures  l.InjectiveAgreement(idA, idB, ev.NewEvent(FinishI, FinishIParams{ idA, idB, naT, nbT }), ev.NewEvent(Respond, RespondParams{ idA, idB, naT, nbT }), set[p.Id]{ p.principalId(idA), p.principalId(idB) })
// the following postcondition provides further insights about the returned witness:
ensures  optCorruptedId != none[p.Id] ==>
	labeling.containsCorruptId((l.Snapshot()).getCorruptIds(), set[p.Id]{ p.principalId(idA), p.principalId(idB) }) &&
	(get(optCorruptedId).getPrincipal() == idA || get(optCorruptedId).getPrincipal() == idB)
func initiatorInjectiveAgreement(l *ll.LabeledLibrary, idA, idB p.Principal, naT, nbT tm.Term) (optCorruptedId option[p.Id]) {
	optCorruptedId = initiatorNonInjectiveAgreement(l, idA, idB, naT, nbT)
	if optCorruptedId == none[p.Id] {
		event := ev.NewEvent(FinishI, FinishIParams{ idA, idB, naT, nbT })
		l.UniqueEventIsUnique(idA, event)
		assert l.EventIsUnique(idA, event)
	}
}
